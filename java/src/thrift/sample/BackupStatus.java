/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift.sample;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-01-28")
public class BackupStatus implements org.apache.thrift.TBase<BackupStatus, BackupStatus._Fields>, java.io.Serializable, Cloneable, Comparable<BackupStatus> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BackupStatus");

  private static final org.apache.thrift.protocol.TField SHORT_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("short_value", org.apache.thrift.protocol.TType.I16, (short)1);
  private static final org.apache.thrift.protocol.TField INT_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("int_value", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField LONG_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("long_value", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField DOUBLE_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("double_value", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField BOOL_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("bool_value", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField STRING_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("string_value", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField LIST_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("list_value", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField SET_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("set_value", org.apache.thrift.protocol.TType.SET, (short)8);
  private static final org.apache.thrift.protocol.TField MAP_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("map_value", org.apache.thrift.protocol.TType.MAP, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BackupStatusStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BackupStatusTupleSchemeFactory());
  }

  public short short_value; // required
  public int int_value; // required
  public long long_value; // required
  public double double_value; // optional
  public boolean bool_value; // optional
  public String string_value; // optional
  public List<String> list_value; // optional
  public Set<String> set_value; // optional
  public Map<String,Integer> map_value; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SHORT_VALUE((short)1, "short_value"),
    INT_VALUE((short)2, "int_value"),
    LONG_VALUE((short)3, "long_value"),
    DOUBLE_VALUE((short)4, "double_value"),
    BOOL_VALUE((short)5, "bool_value"),
    STRING_VALUE((short)6, "string_value"),
    LIST_VALUE((short)7, "list_value"),
    SET_VALUE((short)8, "set_value"),
    MAP_VALUE((short)9, "map_value");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SHORT_VALUE
          return SHORT_VALUE;
        case 2: // INT_VALUE
          return INT_VALUE;
        case 3: // LONG_VALUE
          return LONG_VALUE;
        case 4: // DOUBLE_VALUE
          return DOUBLE_VALUE;
        case 5: // BOOL_VALUE
          return BOOL_VALUE;
        case 6: // STRING_VALUE
          return STRING_VALUE;
        case 7: // LIST_VALUE
          return LIST_VALUE;
        case 8: // SET_VALUE
          return SET_VALUE;
        case 9: // MAP_VALUE
          return MAP_VALUE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SHORT_VALUE_ISSET_ID = 0;
  private static final int __INT_VALUE_ISSET_ID = 1;
  private static final int __LONG_VALUE_ISSET_ID = 2;
  private static final int __DOUBLE_VALUE_ISSET_ID = 3;
  private static final int __BOOL_VALUE_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.DOUBLE_VALUE,_Fields.BOOL_VALUE,_Fields.STRING_VALUE,_Fields.LIST_VALUE,_Fields.SET_VALUE,_Fields.MAP_VALUE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SHORT_VALUE, new org.apache.thrift.meta_data.FieldMetaData("short_value", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.INT_VALUE, new org.apache.thrift.meta_data.FieldMetaData("int_value", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LONG_VALUE, new org.apache.thrift.meta_data.FieldMetaData("long_value", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DOUBLE_VALUE, new org.apache.thrift.meta_data.FieldMetaData("double_value", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.BOOL_VALUE, new org.apache.thrift.meta_data.FieldMetaData("bool_value", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.STRING_VALUE, new org.apache.thrift.meta_data.FieldMetaData("string_value", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LIST_VALUE, new org.apache.thrift.meta_data.FieldMetaData("list_value", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.SET_VALUE, new org.apache.thrift.meta_data.FieldMetaData("set_value", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.MAP_VALUE, new org.apache.thrift.meta_data.FieldMetaData("map_value", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BackupStatus.class, metaDataMap);
  }

  public BackupStatus() {
  }

  public BackupStatus(
    short short_value,
    int int_value,
    long long_value)
  {
    this();
    this.short_value = short_value;
    setShortValueIsSet(true);
    this.int_value = int_value;
    setIntValueIsSet(true);
    this.long_value = long_value;
    setLongValueIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BackupStatus(BackupStatus other) {
    __isset_bitfield = other.__isset_bitfield;
    this.short_value = other.short_value;
    this.int_value = other.int_value;
    this.long_value = other.long_value;
    this.double_value = other.double_value;
    this.bool_value = other.bool_value;
    if (other.isSetStringValue()) {
      this.string_value = other.string_value;
    }
    if (other.isSetListValue()) {
      List<String> __this__list_value = new ArrayList<String>(other.list_value);
      this.list_value = __this__list_value;
    }
    if (other.isSetSetValue()) {
      Set<String> __this__set_value = new HashSet<String>(other.set_value);
      this.set_value = __this__set_value;
    }
    if (other.isSetMapValue()) {
      Map<String,Integer> __this__map_value = new HashMap<String,Integer>(other.map_value);
      this.map_value = __this__map_value;
    }
  }

  public BackupStatus deepCopy() {
    return new BackupStatus(this);
  }

  @Override
  public void clear() {
    setShortValueIsSet(false);
    this.short_value = 0;
    setIntValueIsSet(false);
    this.int_value = 0;
    setLongValueIsSet(false);
    this.long_value = 0;
    setDoubleValueIsSet(false);
    this.double_value = 0.0;
    setBoolValueIsSet(false);
    this.bool_value = false;
    this.string_value = null;
    this.list_value = null;
    this.set_value = null;
    this.map_value = null;
  }

  public short getShortValue() {
    return this.short_value;
  }

  public BackupStatus setShortValue(short short_value) {
    this.short_value = short_value;
    setShortValueIsSet(true);
    return this;
  }

  public void unsetShortValue() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHORT_VALUE_ISSET_ID);
  }

  /** Returns true if field short_value is set (has been assigned a value) and false otherwise */
  public boolean isSetShortValue() {
    return EncodingUtils.testBit(__isset_bitfield, __SHORT_VALUE_ISSET_ID);
  }

  public void setShortValueIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHORT_VALUE_ISSET_ID, value);
  }

  public int getIntValue() {
    return this.int_value;
  }

  public BackupStatus setIntValue(int int_value) {
    this.int_value = int_value;
    setIntValueIsSet(true);
    return this;
  }

  public void unsetIntValue() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INT_VALUE_ISSET_ID);
  }

  /** Returns true if field int_value is set (has been assigned a value) and false otherwise */
  public boolean isSetIntValue() {
    return EncodingUtils.testBit(__isset_bitfield, __INT_VALUE_ISSET_ID);
  }

  public void setIntValueIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INT_VALUE_ISSET_ID, value);
  }

  public long getLongValue() {
    return this.long_value;
  }

  public BackupStatus setLongValue(long long_value) {
    this.long_value = long_value;
    setLongValueIsSet(true);
    return this;
  }

  public void unsetLongValue() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LONG_VALUE_ISSET_ID);
  }

  /** Returns true if field long_value is set (has been assigned a value) and false otherwise */
  public boolean isSetLongValue() {
    return EncodingUtils.testBit(__isset_bitfield, __LONG_VALUE_ISSET_ID);
  }

  public void setLongValueIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LONG_VALUE_ISSET_ID, value);
  }

  public double getDoubleValue() {
    return this.double_value;
  }

  public BackupStatus setDoubleValue(double double_value) {
    this.double_value = double_value;
    setDoubleValueIsSet(true);
    return this;
  }

  public void unsetDoubleValue() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DOUBLE_VALUE_ISSET_ID);
  }

  /** Returns true if field double_value is set (has been assigned a value) and false otherwise */
  public boolean isSetDoubleValue() {
    return EncodingUtils.testBit(__isset_bitfield, __DOUBLE_VALUE_ISSET_ID);
  }

  public void setDoubleValueIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DOUBLE_VALUE_ISSET_ID, value);
  }

  public boolean isBoolValue() {
    return this.bool_value;
  }

  public BackupStatus setBoolValue(boolean bool_value) {
    this.bool_value = bool_value;
    setBoolValueIsSet(true);
    return this;
  }

  public void unsetBoolValue() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BOOL_VALUE_ISSET_ID);
  }

  /** Returns true if field bool_value is set (has been assigned a value) and false otherwise */
  public boolean isSetBoolValue() {
    return EncodingUtils.testBit(__isset_bitfield, __BOOL_VALUE_ISSET_ID);
  }

  public void setBoolValueIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BOOL_VALUE_ISSET_ID, value);
  }

  public String getStringValue() {
    return this.string_value;
  }

  public BackupStatus setStringValue(String string_value) {
    this.string_value = string_value;
    return this;
  }

  public void unsetStringValue() {
    this.string_value = null;
  }

  /** Returns true if field string_value is set (has been assigned a value) and false otherwise */
  public boolean isSetStringValue() {
    return this.string_value != null;
  }

  public void setStringValueIsSet(boolean value) {
    if (!value) {
      this.string_value = null;
    }
  }

  public int getListValueSize() {
    return (this.list_value == null) ? 0 : this.list_value.size();
  }

  public java.util.Iterator<String> getListValueIterator() {
    return (this.list_value == null) ? null : this.list_value.iterator();
  }

  public void addToListValue(String elem) {
    if (this.list_value == null) {
      this.list_value = new ArrayList<String>();
    }
    this.list_value.add(elem);
  }

  public List<String> getListValue() {
    return this.list_value;
  }

  public BackupStatus setListValue(List<String> list_value) {
    this.list_value = list_value;
    return this;
  }

  public void unsetListValue() {
    this.list_value = null;
  }

  /** Returns true if field list_value is set (has been assigned a value) and false otherwise */
  public boolean isSetListValue() {
    return this.list_value != null;
  }

  public void setListValueIsSet(boolean value) {
    if (!value) {
      this.list_value = null;
    }
  }

  public int getSetValueSize() {
    return (this.set_value == null) ? 0 : this.set_value.size();
  }

  public java.util.Iterator<String> getSetValueIterator() {
    return (this.set_value == null) ? null : this.set_value.iterator();
  }

  public void addToSetValue(String elem) {
    if (this.set_value == null) {
      this.set_value = new HashSet<String>();
    }
    this.set_value.add(elem);
  }

  public Set<String> getSetValue() {
    return this.set_value;
  }

  public BackupStatus setSetValue(Set<String> set_value) {
    this.set_value = set_value;
    return this;
  }

  public void unsetSetValue() {
    this.set_value = null;
  }

  /** Returns true if field set_value is set (has been assigned a value) and false otherwise */
  public boolean isSetSetValue() {
    return this.set_value != null;
  }

  public void setSetValueIsSet(boolean value) {
    if (!value) {
      this.set_value = null;
    }
  }

  public int getMapValueSize() {
    return (this.map_value == null) ? 0 : this.map_value.size();
  }

  public void putToMapValue(String key, int val) {
    if (this.map_value == null) {
      this.map_value = new HashMap<String,Integer>();
    }
    this.map_value.put(key, val);
  }

  public Map<String,Integer> getMapValue() {
    return this.map_value;
  }

  public BackupStatus setMapValue(Map<String,Integer> map_value) {
    this.map_value = map_value;
    return this;
  }

  public void unsetMapValue() {
    this.map_value = null;
  }

  /** Returns true if field map_value is set (has been assigned a value) and false otherwise */
  public boolean isSetMapValue() {
    return this.map_value != null;
  }

  public void setMapValueIsSet(boolean value) {
    if (!value) {
      this.map_value = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SHORT_VALUE:
      if (value == null) {
        unsetShortValue();
      } else {
        setShortValue((Short)value);
      }
      break;

    case INT_VALUE:
      if (value == null) {
        unsetIntValue();
      } else {
        setIntValue((Integer)value);
      }
      break;

    case LONG_VALUE:
      if (value == null) {
        unsetLongValue();
      } else {
        setLongValue((Long)value);
      }
      break;

    case DOUBLE_VALUE:
      if (value == null) {
        unsetDoubleValue();
      } else {
        setDoubleValue((Double)value);
      }
      break;

    case BOOL_VALUE:
      if (value == null) {
        unsetBoolValue();
      } else {
        setBoolValue((Boolean)value);
      }
      break;

    case STRING_VALUE:
      if (value == null) {
        unsetStringValue();
      } else {
        setStringValue((String)value);
      }
      break;

    case LIST_VALUE:
      if (value == null) {
        unsetListValue();
      } else {
        setListValue((List<String>)value);
      }
      break;

    case SET_VALUE:
      if (value == null) {
        unsetSetValue();
      } else {
        setSetValue((Set<String>)value);
      }
      break;

    case MAP_VALUE:
      if (value == null) {
        unsetMapValue();
      } else {
        setMapValue((Map<String,Integer>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SHORT_VALUE:
      return getShortValue();

    case INT_VALUE:
      return getIntValue();

    case LONG_VALUE:
      return getLongValue();

    case DOUBLE_VALUE:
      return getDoubleValue();

    case BOOL_VALUE:
      return isBoolValue();

    case STRING_VALUE:
      return getStringValue();

    case LIST_VALUE:
      return getListValue();

    case SET_VALUE:
      return getSetValue();

    case MAP_VALUE:
      return getMapValue();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SHORT_VALUE:
      return isSetShortValue();
    case INT_VALUE:
      return isSetIntValue();
    case LONG_VALUE:
      return isSetLongValue();
    case DOUBLE_VALUE:
      return isSetDoubleValue();
    case BOOL_VALUE:
      return isSetBoolValue();
    case STRING_VALUE:
      return isSetStringValue();
    case LIST_VALUE:
      return isSetListValue();
    case SET_VALUE:
      return isSetSetValue();
    case MAP_VALUE:
      return isSetMapValue();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BackupStatus)
      return this.equals((BackupStatus)that);
    return false;
  }

  public boolean equals(BackupStatus that) {
    if (that == null)
      return false;

    boolean this_present_short_value = true;
    boolean that_present_short_value = true;
    if (this_present_short_value || that_present_short_value) {
      if (!(this_present_short_value && that_present_short_value))
        return false;
      if (this.short_value != that.short_value)
        return false;
    }

    boolean this_present_int_value = true;
    boolean that_present_int_value = true;
    if (this_present_int_value || that_present_int_value) {
      if (!(this_present_int_value && that_present_int_value))
        return false;
      if (this.int_value != that.int_value)
        return false;
    }

    boolean this_present_long_value = true;
    boolean that_present_long_value = true;
    if (this_present_long_value || that_present_long_value) {
      if (!(this_present_long_value && that_present_long_value))
        return false;
      if (this.long_value != that.long_value)
        return false;
    }

    boolean this_present_double_value = true && this.isSetDoubleValue();
    boolean that_present_double_value = true && that.isSetDoubleValue();
    if (this_present_double_value || that_present_double_value) {
      if (!(this_present_double_value && that_present_double_value))
        return false;
      if (this.double_value != that.double_value)
        return false;
    }

    boolean this_present_bool_value = true && this.isSetBoolValue();
    boolean that_present_bool_value = true && that.isSetBoolValue();
    if (this_present_bool_value || that_present_bool_value) {
      if (!(this_present_bool_value && that_present_bool_value))
        return false;
      if (this.bool_value != that.bool_value)
        return false;
    }

    boolean this_present_string_value = true && this.isSetStringValue();
    boolean that_present_string_value = true && that.isSetStringValue();
    if (this_present_string_value || that_present_string_value) {
      if (!(this_present_string_value && that_present_string_value))
        return false;
      if (!this.string_value.equals(that.string_value))
        return false;
    }

    boolean this_present_list_value = true && this.isSetListValue();
    boolean that_present_list_value = true && that.isSetListValue();
    if (this_present_list_value || that_present_list_value) {
      if (!(this_present_list_value && that_present_list_value))
        return false;
      if (!this.list_value.equals(that.list_value))
        return false;
    }

    boolean this_present_set_value = true && this.isSetSetValue();
    boolean that_present_set_value = true && that.isSetSetValue();
    if (this_present_set_value || that_present_set_value) {
      if (!(this_present_set_value && that_present_set_value))
        return false;
      if (!this.set_value.equals(that.set_value))
        return false;
    }

    boolean this_present_map_value = true && this.isSetMapValue();
    boolean that_present_map_value = true && that.isSetMapValue();
    if (this_present_map_value || that_present_map_value) {
      if (!(this_present_map_value && that_present_map_value))
        return false;
      if (!this.map_value.equals(that.map_value))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_short_value = true;
    list.add(present_short_value);
    if (present_short_value)
      list.add(short_value);

    boolean present_int_value = true;
    list.add(present_int_value);
    if (present_int_value)
      list.add(int_value);

    boolean present_long_value = true;
    list.add(present_long_value);
    if (present_long_value)
      list.add(long_value);

    boolean present_double_value = true && (isSetDoubleValue());
    list.add(present_double_value);
    if (present_double_value)
      list.add(double_value);

    boolean present_bool_value = true && (isSetBoolValue());
    list.add(present_bool_value);
    if (present_bool_value)
      list.add(bool_value);

    boolean present_string_value = true && (isSetStringValue());
    list.add(present_string_value);
    if (present_string_value)
      list.add(string_value);

    boolean present_list_value = true && (isSetListValue());
    list.add(present_list_value);
    if (present_list_value)
      list.add(list_value);

    boolean present_set_value = true && (isSetSetValue());
    list.add(present_set_value);
    if (present_set_value)
      list.add(set_value);

    boolean present_map_value = true && (isSetMapValue());
    list.add(present_map_value);
    if (present_map_value)
      list.add(map_value);

    return list.hashCode();
  }

  @Override
  public int compareTo(BackupStatus other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetShortValue()).compareTo(other.isSetShortValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShortValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.short_value, other.short_value);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIntValue()).compareTo(other.isSetIntValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIntValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.int_value, other.int_value);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLongValue()).compareTo(other.isSetLongValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLongValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.long_value, other.long_value);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDoubleValue()).compareTo(other.isSetDoubleValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDoubleValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.double_value, other.double_value);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBoolValue()).compareTo(other.isSetBoolValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBoolValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bool_value, other.bool_value);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStringValue()).compareTo(other.isSetStringValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStringValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.string_value, other.string_value);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetListValue()).compareTo(other.isSetListValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetListValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.list_value, other.list_value);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSetValue()).compareTo(other.isSetSetValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSetValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.set_value, other.set_value);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMapValue()).compareTo(other.isSetMapValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMapValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.map_value, other.map_value);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BackupStatus(");
    boolean first = true;

    sb.append("short_value:");
    sb.append(this.short_value);
    first = false;
    if (!first) sb.append(", ");
    sb.append("int_value:");
    sb.append(this.int_value);
    first = false;
    if (!first) sb.append(", ");
    sb.append("long_value:");
    sb.append(this.long_value);
    first = false;
    if (isSetDoubleValue()) {
      if (!first) sb.append(", ");
      sb.append("double_value:");
      sb.append(this.double_value);
      first = false;
    }
    if (isSetBoolValue()) {
      if (!first) sb.append(", ");
      sb.append("bool_value:");
      sb.append(this.bool_value);
      first = false;
    }
    if (isSetStringValue()) {
      if (!first) sb.append(", ");
      sb.append("string_value:");
      if (this.string_value == null) {
        sb.append("null");
      } else {
        sb.append(this.string_value);
      }
      first = false;
    }
    if (isSetListValue()) {
      if (!first) sb.append(", ");
      sb.append("list_value:");
      if (this.list_value == null) {
        sb.append("null");
      } else {
        sb.append(this.list_value);
      }
      first = false;
    }
    if (isSetSetValue()) {
      if (!first) sb.append(", ");
      sb.append("set_value:");
      if (this.set_value == null) {
        sb.append("null");
      } else {
        sb.append(this.set_value);
      }
      first = false;
    }
    if (isSetMapValue()) {
      if (!first) sb.append(", ");
      sb.append("map_value:");
      if (this.map_value == null) {
        sb.append("null");
      } else {
        sb.append(this.map_value);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'short_value' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'int_value' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'long_value' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BackupStatusStandardSchemeFactory implements SchemeFactory {
    public BackupStatusStandardScheme getScheme() {
      return new BackupStatusStandardScheme();
    }
  }

  private static class BackupStatusStandardScheme extends StandardScheme<BackupStatus> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BackupStatus struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SHORT_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.short_value = iprot.readI16();
              struct.setShortValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // INT_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.int_value = iprot.readI32();
              struct.setIntValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LONG_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.long_value = iprot.readI64();
              struct.setLongValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DOUBLE_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.double_value = iprot.readDouble();
              struct.setDoubleValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // BOOL_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.bool_value = iprot.readBool();
              struct.setBoolValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // STRING_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.string_value = iprot.readString();
              struct.setStringValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // LIST_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.list_value = new ArrayList<String>(_list0.size);
                String _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readString();
                  struct.list_value.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setListValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SET_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set3 = iprot.readSetBegin();
                struct.set_value = new HashSet<String>(2*_set3.size);
                String _elem4;
                for (int _i5 = 0; _i5 < _set3.size; ++_i5)
                {
                  _elem4 = iprot.readString();
                  struct.set_value.add(_elem4);
                }
                iprot.readSetEnd();
              }
              struct.setSetValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // MAP_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map6 = iprot.readMapBegin();
                struct.map_value = new HashMap<String,Integer>(2*_map6.size);
                String _key7;
                int _val8;
                for (int _i9 = 0; _i9 < _map6.size; ++_i9)
                {
                  _key7 = iprot.readString();
                  _val8 = iprot.readI32();
                  struct.map_value.put(_key7, _val8);
                }
                iprot.readMapEnd();
              }
              struct.setMapValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetShortValue()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'short_value' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetIntValue()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'int_value' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetLongValue()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'long_value' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BackupStatus struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SHORT_VALUE_FIELD_DESC);
      oprot.writeI16(struct.short_value);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INT_VALUE_FIELD_DESC);
      oprot.writeI32(struct.int_value);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LONG_VALUE_FIELD_DESC);
      oprot.writeI64(struct.long_value);
      oprot.writeFieldEnd();
      if (struct.isSetDoubleValue()) {
        oprot.writeFieldBegin(DOUBLE_VALUE_FIELD_DESC);
        oprot.writeDouble(struct.double_value);
        oprot.writeFieldEnd();
      }
      if (struct.isSetBoolValue()) {
        oprot.writeFieldBegin(BOOL_VALUE_FIELD_DESC);
        oprot.writeBool(struct.bool_value);
        oprot.writeFieldEnd();
      }
      if (struct.string_value != null) {
        if (struct.isSetStringValue()) {
          oprot.writeFieldBegin(STRING_VALUE_FIELD_DESC);
          oprot.writeString(struct.string_value);
          oprot.writeFieldEnd();
        }
      }
      if (struct.list_value != null) {
        if (struct.isSetListValue()) {
          oprot.writeFieldBegin(LIST_VALUE_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.list_value.size()));
            for (String _iter10 : struct.list_value)
            {
              oprot.writeString(_iter10);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.set_value != null) {
        if (struct.isSetSetValue()) {
          oprot.writeFieldBegin(SET_VALUE_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.set_value.size()));
            for (String _iter11 : struct.set_value)
            {
              oprot.writeString(_iter11);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.map_value != null) {
        if (struct.isSetMapValue()) {
          oprot.writeFieldBegin(MAP_VALUE_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I32, struct.map_value.size()));
            for (Map.Entry<String, Integer> _iter12 : struct.map_value.entrySet())
            {
              oprot.writeString(_iter12.getKey());
              oprot.writeI32(_iter12.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BackupStatusTupleSchemeFactory implements SchemeFactory {
    public BackupStatusTupleScheme getScheme() {
      return new BackupStatusTupleScheme();
    }
  }

  private static class BackupStatusTupleScheme extends TupleScheme<BackupStatus> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BackupStatus struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI16(struct.short_value);
      oprot.writeI32(struct.int_value);
      oprot.writeI64(struct.long_value);
      BitSet optionals = new BitSet();
      if (struct.isSetDoubleValue()) {
        optionals.set(0);
      }
      if (struct.isSetBoolValue()) {
        optionals.set(1);
      }
      if (struct.isSetStringValue()) {
        optionals.set(2);
      }
      if (struct.isSetListValue()) {
        optionals.set(3);
      }
      if (struct.isSetSetValue()) {
        optionals.set(4);
      }
      if (struct.isSetMapValue()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetDoubleValue()) {
        oprot.writeDouble(struct.double_value);
      }
      if (struct.isSetBoolValue()) {
        oprot.writeBool(struct.bool_value);
      }
      if (struct.isSetStringValue()) {
        oprot.writeString(struct.string_value);
      }
      if (struct.isSetListValue()) {
        {
          oprot.writeI32(struct.list_value.size());
          for (String _iter13 : struct.list_value)
          {
            oprot.writeString(_iter13);
          }
        }
      }
      if (struct.isSetSetValue()) {
        {
          oprot.writeI32(struct.set_value.size());
          for (String _iter14 : struct.set_value)
          {
            oprot.writeString(_iter14);
          }
        }
      }
      if (struct.isSetMapValue()) {
        {
          oprot.writeI32(struct.map_value.size());
          for (Map.Entry<String, Integer> _iter15 : struct.map_value.entrySet())
          {
            oprot.writeString(_iter15.getKey());
            oprot.writeI32(_iter15.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BackupStatus struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.short_value = iprot.readI16();
      struct.setShortValueIsSet(true);
      struct.int_value = iprot.readI32();
      struct.setIntValueIsSet(true);
      struct.long_value = iprot.readI64();
      struct.setLongValueIsSet(true);
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.double_value = iprot.readDouble();
        struct.setDoubleValueIsSet(true);
      }
      if (incoming.get(1)) {
        struct.bool_value = iprot.readBool();
        struct.setBoolValueIsSet(true);
      }
      if (incoming.get(2)) {
        struct.string_value = iprot.readString();
        struct.setStringValueIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list16 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.list_value = new ArrayList<String>(_list16.size);
          String _elem17;
          for (int _i18 = 0; _i18 < _list16.size; ++_i18)
          {
            _elem17 = iprot.readString();
            struct.list_value.add(_elem17);
          }
        }
        struct.setListValueIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TSet _set19 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.set_value = new HashSet<String>(2*_set19.size);
          String _elem20;
          for (int _i21 = 0; _i21 < _set19.size; ++_i21)
          {
            _elem20 = iprot.readString();
            struct.set_value.add(_elem20);
          }
        }
        struct.setSetValueIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TMap _map22 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.map_value = new HashMap<String,Integer>(2*_map22.size);
          String _key23;
          int _val24;
          for (int _i25 = 0; _i25 < _map22.size; ++_i25)
          {
            _key23 = iprot.readString();
            _val24 = iprot.readI32();
            struct.map_value.put(_key23, _val24);
          }
        }
        struct.setMapValueIsSet(true);
      }
    }
  }

}

