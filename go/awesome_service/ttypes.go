// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package awesome_service

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var GoUnusedProtection__ int

type SystemType int64

const (
	SystemType_WINDOWS  SystemType = 0
	SystemType_MAC_OS_X SystemType = 1
)

func (p SystemType) String() string {
	switch p {
	case SystemType_WINDOWS:
		return "WINDOWS"
	case SystemType_MAC_OS_X:
		return "MAC_OS_X"
	}
	return "<UNSET>"
}

func SystemTypeFromString(s string) (SystemType, error) {
	switch s {
	case "WINDOWS":
		return SystemType_WINDOWS, nil
	case "MAC_OS_X":
		return SystemType_MAC_OS_X, nil
	}
	return SystemType(0), fmt.Errorf("not a valid SystemType string")
}

func SystemTypePtr(v SystemType) *SystemType { return &v }

func (p SystemType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *SystemType) UnmarshalText(text []byte) error {
	q, err := SystemTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

// Attributes:
//  - ShortValue
//  - IntValue
//  - LongValue
//  - DoubleValue
//  - BoolValue
//  - StringValue
//  - ListValue
//  - SetValue
//  - MapValue
type Types struct {
	ShortValue  int16            `thrift:"short_value,1,required" json:"short_value"`
	IntValue    int32            `thrift:"int_value,2,required" json:"int_value"`
	LongValue   int64            `thrift:"long_value,3,required" json:"long_value"`
	DoubleValue *float64         `thrift:"double_value,4" json:"double_value,omitempty"`
	BoolValue   *bool            `thrift:"bool_value,5" json:"bool_value,omitempty"`
	StringValue *string          `thrift:"string_value,6" json:"string_value,omitempty"`
	ListValue   []string         `thrift:"list_value,7" json:"list_value,omitempty"`
	SetValue    map[string]bool  `thrift:"set_value,8" json:"set_value,omitempty"`
	MapValue    map[string]int32 `thrift:"map_value,9" json:"map_value,omitempty"`
}

func NewTypes() *Types {
	return &Types{}
}

func (p *Types) GetShortValue() int16 {
	return p.ShortValue
}

func (p *Types) GetIntValue() int32 {
	return p.IntValue
}

func (p *Types) GetLongValue() int64 {
	return p.LongValue
}

var Types_DoubleValue_DEFAULT float64

func (p *Types) GetDoubleValue() float64 {
	if !p.IsSetDoubleValue() {
		return Types_DoubleValue_DEFAULT
	}
	return *p.DoubleValue
}

var Types_BoolValue_DEFAULT bool

func (p *Types) GetBoolValue() bool {
	if !p.IsSetBoolValue() {
		return Types_BoolValue_DEFAULT
	}
	return *p.BoolValue
}

var Types_StringValue_DEFAULT string

func (p *Types) GetStringValue() string {
	if !p.IsSetStringValue() {
		return Types_StringValue_DEFAULT
	}
	return *p.StringValue
}

var Types_ListValue_DEFAULT []string

func (p *Types) GetListValue() []string {
	return p.ListValue
}

var Types_SetValue_DEFAULT map[string]bool

func (p *Types) GetSetValue() map[string]bool {
	return p.SetValue
}

var Types_MapValue_DEFAULT map[string]int32

func (p *Types) GetMapValue() map[string]int32 {
	return p.MapValue
}
func (p *Types) IsSetDoubleValue() bool {
	return p.DoubleValue != nil
}

func (p *Types) IsSetBoolValue() bool {
	return p.BoolValue != nil
}

func (p *Types) IsSetStringValue() bool {
	return p.StringValue != nil
}

func (p *Types) IsSetListValue() bool {
	return p.ListValue != nil
}

func (p *Types) IsSetSetValue() bool {
	return p.SetValue != nil
}

func (p *Types) IsSetMapValue() bool {
	return p.MapValue != nil
}

func (p *Types) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetShortValue bool = false
	var issetIntValue bool = false
	var issetLongValue bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetShortValue = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetIntValue = true
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
			issetLongValue = true
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetShortValue {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ShortValue is not set"))
	}
	if !issetIntValue {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field IntValue is not set"))
	}
	if !issetLongValue {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field LongValue is not set"))
	}
	return nil
}

func (p *Types) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ShortValue = v
	}
	return nil
}

func (p *Types) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.IntValue = v
	}
	return nil
}

func (p *Types) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.LongValue = v
	}
	return nil
}

func (p *Types) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.DoubleValue = &v
	}
	return nil
}

func (p *Types) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.BoolValue = &v
	}
	return nil
}

func (p *Types) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.StringValue = &v
	}
	return nil
}

func (p *Types) readField7(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.ListValue = tSlice
	for i := 0; i < size; i++ {
		var _elem0 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem0 = v
		}
		p.ListValue = append(p.ListValue, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *Types) readField8(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return thrift.PrependError("error reading set begin: ", err)
	}
	tSet := make(map[string]bool, size)
	p.SetValue = tSet
	for i := 0; i < size; i++ {
		var _elem1 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem1 = v
		}
		p.SetValue[_elem1] = true
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return thrift.PrependError("error reading set end: ", err)
	}
	return nil
}

func (p *Types) readField9(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]int32, size)
	p.MapValue = tMap
	for i := 0; i < size; i++ {
		var _key2 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key2 = v
		}
		var _val3 int32
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val3 = v
		}
		p.MapValue[_key2] = _val3
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *Types) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Types"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Types) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("short_value", thrift.I16, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:short_value: ", p), err)
	}
	if err := oprot.WriteI16(int16(p.ShortValue)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.short_value (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:short_value: ", p), err)
	}
	return err
}

func (p *Types) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("int_value", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:int_value: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.IntValue)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.int_value (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:int_value: ", p), err)
	}
	return err
}

func (p *Types) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("long_value", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:long_value: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.LongValue)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.long_value (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:long_value: ", p), err)
	}
	return err
}

func (p *Types) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetDoubleValue() {
		if err := oprot.WriteFieldBegin("double_value", thrift.DOUBLE, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:double_value: ", p), err)
		}
		if err := oprot.WriteDouble(float64(*p.DoubleValue)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.double_value (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:double_value: ", p), err)
		}
	}
	return err
}

func (p *Types) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetBoolValue() {
		if err := oprot.WriteFieldBegin("bool_value", thrift.BOOL, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:bool_value: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.BoolValue)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.bool_value (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:bool_value: ", p), err)
		}
	}
	return err
}

func (p *Types) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetStringValue() {
		if err := oprot.WriteFieldBegin("string_value", thrift.STRING, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:string_value: ", p), err)
		}
		if err := oprot.WriteString(string(*p.StringValue)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.string_value (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:string_value: ", p), err)
		}
	}
	return err
}

func (p *Types) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetListValue() {
		if err := oprot.WriteFieldBegin("list_value", thrift.LIST, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:list_value: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.ListValue)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.ListValue {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:list_value: ", p), err)
		}
	}
	return err
}

func (p *Types) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetSetValue() {
		if err := oprot.WriteFieldBegin("set_value", thrift.SET, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:set_value: ", p), err)
		}
		if err := oprot.WriteSetBegin(thrift.STRING, len(p.SetValue)); err != nil {
			return thrift.PrependError("error writing set begin: ", err)
		}
		for v, _ := range p.SetValue {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteSetEnd(); err != nil {
			return thrift.PrependError("error writing set end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:set_value: ", p), err)
		}
	}
	return err
}

func (p *Types) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetMapValue() {
		if err := oprot.WriteFieldBegin("map_value", thrift.MAP, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:map_value: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.I32, len(p.MapValue)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.MapValue {
			if err := oprot.WriteString(string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteI32(int32(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:map_value: ", p), err)
		}
	}
	return err
}

func (p *Types) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Types(%+v)", *p)
}
