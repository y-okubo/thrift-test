#
# Autogenerated by Thrift Compiler (0.9.3)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'nekojarashi_types'

module NekojarashiEngine
  class Client
    include ::Thrift::Client

    def backup_start()
      send_backup_start()
      recv_backup_start()
    end

    def send_backup_start()
      send_message('backup_start', Backup_start_args)
    end

    def recv_backup_start()
      result = receive_message(Backup_start_result)
      return
    end

    def backup_status()
      send_backup_status()
      return recv_backup_status()
    end

    def send_backup_status()
      send_message('backup_status', Backup_status_args)
    end

    def recv_backup_status()
      result = receive_message(Backup_status_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'backup_status failed: unknown result')
    end

  end

  class Processor
    include ::Thrift::Processor

    def process_backup_start(seqid, iprot, oprot)
      args = read_args(iprot, Backup_start_args)
      result = Backup_start_result.new()
      @handler.backup_start()
      write_result(result, oprot, 'backup_start', seqid)
    end

    def process_backup_status(seqid, iprot, oprot)
      args = read_args(iprot, Backup_status_args)
      result = Backup_status_result.new()
      result.success = @handler.backup_status()
      write_result(result, oprot, 'backup_status', seqid)
    end

  end

  # HELPER FUNCTIONS AND STRUCTURES

  class Backup_start_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Backup_start_result
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Backup_status_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Backup_status_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::BackupStatus}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

end

